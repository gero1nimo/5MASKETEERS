// Firebase Storage Security Rules for MedipolApp Club Chat Media Files
// These rules should be applied in Firebase Console > Storage > Rules

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Club chat media files: /club_chat/{clubId}/media/{mediaId}/{filename}
    match /club_chat/{clubId}/media/{mediaId}/{filename} {
      // Allow read if user is authenticated
      // TODO: Re-enable club membership check once chat participants are properly set up  
      allow read: if request.auth != null;
      
      // Allow write if user is authenticated and the file meets size/type constraints
      // TODO: Re-enable club membership check once chat participants are properly set up
      allow write: if request.auth != null && 
                      isValidMediaFile(request.resource);
      
      // Allow delete if user is authenticated and is either:
      // 1. The original uploader of the file
      // 2. An admin/creator of the club
      allow delete: if request.auth != null && 
                       (resource.metadata.uploaderId == request.auth.uid ||
                        isClubAdmin(clubId, request.auth.uid));
    }
    
    // Club chat voice messages: /club_chat/{clubId}/voice/{messageId}/{filename}
    match /club_chat/{clubId}/voice/{messageId}/{filename} {
      allow read: if request.auth != null && 
                     isClubMember(clubId, request.auth.uid);
      
      allow write: if request.auth != null && 
                      isClubMember(clubId, request.auth.uid) &&
                      isValidVoiceFile(request.resource);
      
      allow delete: if request.auth != null && 
                       (resource.metadata.uploaderId == request.auth.uid ||
                        isClubAdmin(clubId, request.auth.uid));
    }
    
    // User profile images: /user_profiles/{userId}/avatar/{filename}
    match /user_profiles/{userId}/avatar/{filename} {
      allow read: if request.auth != null;
      
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      isValidImageFile(request.resource);
      
      allow delete: if request.auth != null && 
                       request.auth.uid == userId;
    }
    
    // Event media files: /events/{eventId}/media/{filename}
    match /events/{eventId}/media/{filename} {
      allow read: if request.auth != null;
      
      allow write: if request.auth != null && 
                      isEventOrganizer(eventId, request.auth.uid) &&
                      isValidMediaFile(request.resource);
      
      allow delete: if request.auth != null && 
                       isEventOrganizer(eventId, request.auth.uid);
    }
    
    // Club logos and banners: /clubs/{clubId}/images/{filename}
    match /clubs/{clubId}/images/{filename} {
      allow read: if request.auth != null;
      
      allow write: if request.auth != null && 
                      isClubAdmin(clubId, request.auth.uid) &&
                      isValidImageFile(request.resource);
      
      allow delete: if request.auth != null && 
                       isClubAdmin(clubId, request.auth.uid);
    }
    
    // Deny access to all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
  
  // Helper functions for permission checks
  function isClubMember(clubId, userId) {
    // Check if user is a chat participant (has access to club chat)
    return exists(/databases/(default)/documents/chat_participants/$(clubId + '_' + userId));
  }
  
  function isClubAdmin(clubId, userId) {
    // Get the chat participant document to check role
    let participantPath = /databases/(default)/documents/chat_participants/$(clubId + '_' + userId);
    return exists(participantPath) && 
           get(participantPath).data.role in ['admin', 'creator'];
  }
  
  function isEventOrganizer(eventId, userId) {
    let event = get(/databases/(default)/documents/user_events/$(eventId));
    return event.data.organizerId == userId;
  }
  
  // File validation functions
  function isValidMediaFile(resource) {
    return resource.size <= 50 * 1024 * 1024 && // 50MB max size
           resource.contentType.matches('image/.*|video/.*|application/pdf|text/.*|application/msword|application/vnd.openxmlformats-officedocument.*');
  }
  
  function isValidImageFile(resource) {
    return resource.size <= 10 * 1024 * 1024 && // 10MB max size
           resource.contentType.matches('image/.*');
  }
  
  function isValidVoiceFile(resource) {
    return resource.size <= 10 * 1024 * 1024 && // 10MB max size
           resource.contentType.matches('audio/.*');
  }
}

/*
DEPLOYMENT INSTRUCTIONS:

1. Copy the rules content above (everything within the rules_version block)

2. Go to Firebase Console:
   - Open your project: https://console.firebase.google.com/
   - Navigate to Storage > Rules tab
   - Replace the existing rules with the content above
   - Click "Publish" to deploy the rules

3. Test the rules using Firebase Rules Playground:
   - Use the "Rules Playground" tab to test various scenarios
   - Test authenticated vs unauthenticated access
   - Test club member vs non-member access
   - Test file size and type restrictions

4. Monitor rule usage:
   - Check Storage > Usage tab for any unauthorized access attempts
   - Review logs in Cloud Logging for rule evaluation results

SECURITY FEATURES:

✅ Authentication Required: All operations require authenticated users
✅ Club Membership: Media access restricted to club members only  
✅ File Size Limits: 50MB for media files, 10MB for images/voice
✅ File Type Validation: Only allowed file types can be uploaded
✅ Admin Controls: Only admins/creators can delete others' files
✅ User Ownership: Users can only modify their own profile images
✅ Event Permissions: Only event organizers can manage event media
✅ Granular Paths: Specific rules for different content types
✅ Deny by Default: All unspecified paths are blocked

SUPPORTED FILE TYPES:

- Images: JPEG, PNG, GIF, WebP, SVG
- Videos: MP4, WebM, AVI, MOV  
- Documents: PDF, DOC, DOCX, TXT
- Audio: MP3, WAV, AAC, OGG (voice messages)
- Office: Excel, PowerPoint files
*/